{
  "{\"sourceRoot\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\",\"filename\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\quality-assurance-projects-main\\Sodoku Solver",
      "filename": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\quality-assurance-projects-main\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let {\n      value,\n      coordinate,\n      puzzle\n    } = req.body;\n    let alphaTest = /[a-i]/gi;\n    let numberTest = /^[1-9]$/g;\n    const regex = /^[1-9.]+$/;\n    if (!value || !coordinate || !puzzle) return res.json({\n      error: 'Required field(s) missing'\n    });\n    if (!regex.test(puzzle)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzle.length !== 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    });\n    const splitCoord = coordinate.split('');\n    if (splitCoord.length > 2 || splitCoord.length === 1 || !alphaTest.test(splitCoord[0]) || !numberTest.test(splitCoord[1])) return res.json({\n      error: 'Invalid coordinate'\n    });\n    if (!value.match(numberTest)) return res.json({\n      error: 'Invalid value'\n    });\n    let rowPlace = solver.checkRowPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let colPlace = solver.checkColPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let regionPlace = solver.checkRegionPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let conflicts = [];\n    if (rowPlace && colPlace && regionPlace) return res.json({\n      valid: true\n    });else {\n      if (!rowPlace) conflicts.push('row');\n      if (!colPlace) conflicts.push('column');\n      if (!regionPlace) conflicts.push('region');\n      return res.json({\n        valid: false,\n        conflict: conflicts\n      });\n    }\n  });\n  app.route('/api/solve').post((req, res) => {\n    const {\n      puzzle\n    } = req.body;\n    const regex = /^[1-9.]+$/;\n    if (!puzzle) return res.json({\n      error: 'Required field missing'\n    });\n    if (!regex.test(puzzle)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzle.length !== 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    });\n    let solvedString = solver.solve(puzzle);\n    if (!solvedString) res.json({\n      error: 'Puzzle cannot be solved'\n    });else return res.json({\n      solution: solvedString\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsInNvbHZlciIsInJvdXRlIiwicG9zdCIsInJlcSIsInJlcyIsInZhbHVlIiwiY29vcmRpbmF0ZSIsInB1enpsZSIsImJvZHkiLCJhbHBoYVRlc3QiLCJudW1iZXJUZXN0IiwicmVnZXgiLCJqc29uIiwiZXJyb3IiLCJ0ZXN0IiwibGVuZ3RoIiwic3BsaXRDb29yZCIsInNwbGl0IiwibWF0Y2giLCJyb3dQbGFjZSIsImNoZWNrUm93UGxhY2VtZW50IiwiY29sUGxhY2UiLCJjaGVja0NvbFBsYWNlbWVudCIsInJlZ2lvblBsYWNlIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJjb25mbGljdHMiLCJ2YWxpZCIsInB1c2giLCJjb25mbGljdCIsInNvbHZlZFN0cmluZyIsInNvbHZlIiwic29sdXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGlDQUFELENBQTVCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBRTlCLE1BQUlDLE1BQU0sR0FBRyxJQUFJTCxZQUFKLEVBQWI7QUFFQUksRUFBQUEsR0FBRyxDQUFDRSxLQUFKLENBQVUsWUFBVixFQUNHQyxJQURILENBQ1EsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDbEIsUUFBSTtBQUFDQyxNQUFBQSxLQUFEO0FBQVFDLE1BQUFBLFVBQVI7QUFBb0JDLE1BQUFBO0FBQXBCLFFBQThCSixHQUFHLENBQUNLLElBQXRDO0FBRUEsUUFBSUMsU0FBUyxHQUFHLFNBQWhCO0FBQ0EsUUFBSUMsVUFBVSxHQUFJLFVBQWxCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLFdBQWQ7QUFFQSxRQUFHLENBQUNOLEtBQUQsSUFBVSxDQUFDQyxVQUFYLElBQXlCLENBQUNDLE1BQTdCLEVBQXFDLE9BQU9ILEdBQUcsQ0FB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Q0YsS0FBSyxDQUFDRyxJQUFOLENBQVdQLE1BQVgsQ0FBSixFQUF3QixPQUFPSCxHQUFHLENBQUNRLElBQUosQ0FBUztBQUFDQyxNQUFBQSxLQUFLLEVBQUU7QUFBUixLQUFULENBQVA7QUFDeEIsUUFBR04sTUFBTSxDQUFDUSxNQUFQLEtBQWtCLEVBQXJCLEVBQXlCLE9BQU9YLEdBQUcsQ0FBQ1EsSUFBSixDQUFTO0FBQUNDLE1BQUFBLEtBQUssRUFBRTtBQUFSLEtBQVQsQ0FBUDtBQUV6QixRQUFJZ0IsWUFBWSxHQUFHN0IsTUFBTSxDQUFDOEIsS0FBUCxDQUFhdkIsTUFBYixDQUFuQjtBQUNBLFFBQUcsQ0FBQ3NCLFlBQUosRUFBa0J6QixHQUFHLENBQUNRLElBQUosQ0FBUztBQUFDQyxNQUFBQSxLQUFLLEVBQUU7QUFBUixLQUFULEVBQWxCLEtBQ0ssT0FBT1QsR0FBRyxDQUFDUSxJQUFKLENBQVM7QUFBQ21CLE1BQUFBLFFBQVEsRUFBRUY7QUFBWCxLQUFULENBQVA7QUFDTixHQVpIO0FBYUQsQ0EvQ0QiLCJzb3VyY2VSb290IjoiRDpcXHF1YWxpdHktYXNzdXJhbmNlLXByb2plY3RzLW1haW5cXFNvZG9rdSBTb2x2ZXJcXHJvdXRlc1xcIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBTdWRva3VTb2x2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9zdWRva3Utc29sdmVyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCkge1xuICBcbiAgbGV0IHNvbHZlciA9IG5ldyBTdWRva3VTb2x2ZXIoKTtcblxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgbGV0IHt2YWx1ZSwgY29vcmRpbmF0ZSwgcHV6emxlfSA9IHJlcS5ib2R5XG4gICAgICBcbiAgICAgIGxldCBhbHBoYVRlc3QgPSAvW2EtaV0vZ2lcbiAgICAgIGxldCBudW1iZXJUZXN0ID0gIC9eWzEtOV0kL2dcbiAgICAgIGNvbnN0IHJlZ2V4ID0gL15bMS05Ll0rJC8gXG4gICAgICBcbiAgICAgIGlmKCF2YWx1ZSB8fCAhY29vcmRpbmF0ZSB8fCAhcHV6emxlKSByZXR1cm4gcmVzLmpzb24oe2Vycm9yOiAnUmVxdWlyZWQgZmllbGQocykgbWlzc2luZyd9KVxuICAgICAgaWYoIXJlZ2V4LnRlc3QocHV6emxlKSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBwdXp6bGUnfSlcbiAgICAgIGlmKHB1enpsZS5sZW5ndGggIT09IDgxKSByZXR1cm4gcmVzLmpzb24oe2Vycm9yOiAnRXhwZWN0ZWQgcHV6emxlIHRvIGJlIDgxIGNoYXJhY3RlcnMgbG9uZyd9KVxuICAgICAgXG4gICAgICBjb25zdCBzcGxpdENvb3JkID0gY29vcmRpbmF0ZS5zcGxpdCgnJylcbiAgICAgIGlmKHNwbGl0Q29vcmQubGVuZ3RoID4gMiB8fCBzcGxpdENvb3JkLmxlbmd0aCA9PT0gMSB8fCAhYWxwaGFUZXN0LnRlc3Qoc3BsaXRDb29yZFswXSkgfHwgIW51bWJlclRlc3QudGVzdChzcGxpdENvb3JkWzFdKSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ0ludmFsaWQgY29vcmRpbmF0ZSd9KVxuICAgICAgaWYoIXZhbHVlLm1hdGNoKG51bWJlclRlc3QpKSByZXR1cm4gcmVzLmpzb24oe2Vycm9yOiAnSW52YWxpZCB2YWx1ZSd9KVxuXG4gICAgICBsZXQgcm93UGxhY2UgPSBzb2x2ZXIuY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlLCBzcGxpdENvb3JkWzBdLCBzcGxpdENvb3JkWzFdLHZhbHVlKVxuICAgICAgbGV0IGNvbFBsYWNlID0gc29sdmVyLmNoZWNrQ29sUGxhY2VtZW50KHB1enpsZSwgc3BsaXRDb29yZFswXSwgc3BsaXRDb29yZFsxXSx2YWx1ZSlcbiAgICAgIGxldCByZWdpb25QbGFjZSA9IHNvbHZlci5jaGVja1JlZ2lvblBsYWNlbWVudChwdXp6bGUsIHNwbGl0Q29vcmRbMF0sIHNwbGl0Q29vcmRbMV0sdmFsdWUpXG4gICAgICBsZXQgY29uZmxpY3RzID0gW11cblxuICAgICAgaWYocm93UGxhY2UgJiYgY29sUGxhY2UgJiYgcmVnaW9uUGxhY2UpIHJldHVybiByZXMuanNvbih7dmFsaWQ6IHRydWV9KVxuICAgICAgZWxzZXtcbiAgICAgICAgaWYoIXJvd1BsYWNlKSBjb25mbGljdHMucHVzaCgncm93JylcbiAgICAgICAgaWYoIWNvbFBsYWNlKSBjb25mbGljdHMucHVzaCgnY29sdW1uJylcbiAgICAgICAgaWYoIXJlZ2lvblBsYWNlKSBjb25mbGljdHMucHVzaCgncmVnaW9uJylcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHt2YWxpZDogZmFsc2UsIGNvbmZsaWN0OiBjb25mbGljdHN9KVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxuICAgIC5wb3N0KChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc3Qge3B1enpsZX0gPSByZXEuYm9keVxuICAgICAgY29uc3QgcmVnZXggPSAvXlsxLTkuXSskLyBcblxuICAgICAgaWYoIXB1enpsZSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ1JlcXVpcmVkIGZpZWxkIG1pc3NpbmcnfSlcbiAgICAgIGlmKCFyZWdleC50ZXN0KHB1enpsZSkpIHJldHVybiByZXMuanNvbih7ZXJyb3I6ICdJbnZhbGlkIGNoYXJhY3RlcnMgaW4gcHV6emxlJ30pXG4gICAgICBpZihwdXp6bGUubGVuZ3RoICE9PSA4MSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ0V4cGVjdGVkIHB1enpsZSB0byBiZSA4MSBjaGFyYWN0ZXJzIGxvbmcnfSlcbiAgICAgIFxuICAgICAgbGV0IHNvbHZlZFN0cmluZyA9IHNvbHZlci5zb2x2ZShwdXp6bGUpXG4gICAgICBpZighc29sdmVkU3RyaW5nKSByZXMuanNvbih7ZXJyb3I6ICdQdXp6bGUgY2Fubm90IGJlIHNvbHZlZCd9KVxuICAgICAgZWxzZSByZXR1cm4gcmVzLmpzb24oe3NvbHV0aW9uOiBzb2x2ZWRTdHJpbmd9KVxuICAgIH0pO1xufTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "value",
        "coordinate",
        "puzzle",
        "body",
        "alphaTest",
        "numberTest",
        "regex",
        "json",
        "error",
        "test",
        "length",
        "splitCoord",
        "split",
        "match",
        "rowPlace",
        "checkRowPlacement",
        "colPlace",
        "checkColPlacement",
        "regionPlace",
        "checkRegionPlacement",
        "conflicts",
        "valid",
        "push",
        "conflict",
        "solvedString",
        "solve",
        "solution"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\routes\\",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let {value, coordinate, puzzle} = req.body\n      \n      let alphaTest = /[a-i]/gi\n      let numberTest =  /^[1-9]$/g\n      const regex = /^[1-9.]+$/ \n      \n      if(!value || !coordinate || !puzzle) return res.json({error: 'Required field(s) missing'})\n      if(!regex.test(puzzle)) return res.json({error: 'Invalid characters in puzzle'})\n      if(puzzle.length !== 81) return res.json({error: 'Expected puzzle to be 81 characters long'})\n      \n      const splitCoord = coordinate.split('')\n      if(splitCoord.length > 2 || splitCoord.length === 1 || !alphaTest.test(splitCoord[0]) || !numberTest.test(splitCoord[1])) return res.json({error: 'Invalid coordinate'})\n      if(!value.match(numberTest)) return res.json({error: 'Invalid value'})\n\n      let rowPlace = solver.checkRowPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let colPlace = solver.checkColPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let regionPlace = solver.checkRegionPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let conflicts = []\n\n      if(rowPlace && colPlace && regionPlace) return res.json({valid: true})\n      else{\n        if(!rowPlace) conflicts.push('row')\n        if(!colPlace) conflicts.push('column')\n        if(!regionPlace) conflicts.push('region')\n        return res.json({valid: false, conflict: conflicts})\n      }\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      const {puzzle} = req.body\n      const regex = /^[1-9.]+$/ \n\n      if(!puzzle) return res.json({error: 'Required field missing'})\n      if(!regex.test(puzzle)) return res.json({error: 'Invalid characters in puzzle'})\n      if(puzzle.length !== 81) return res.json({error: 'Expected puzzle to be 81 characters long'})\n      \n      let solvedString = solver.solve(puzzle)\n      if(!solvedString) res.json({error: 'Puzzle cannot be solved'})\n      else return res.json({solution: solvedString})\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761280582673
  },
  "{\"sourceRoot\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\",\"filename\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\quality-assurance-projects-main\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\quality-assurance-projects-main\\Sodoku Solver",
      "filename": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\quality-assurance-projects-main\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "let N = 9;\n\nclass SudokuSolver {\n  validate(puzzleString) {\n    const regex = /^[1-9.]+$/;\n    if (!puzzleString) return false;else if (!regex.test(puzzleString)) return false;else if (puzzleString.length !== 81) return false;else return true;\n  }\n\n  letterToNumber(row) {\n    switch (row.toUpperCase()) {\n      case 'A':\n        return 1;\n\n      case 'B':\n        return 2;\n\n      case 'C':\n        return 3;\n\n      case 'D':\n        return 4;\n\n      case 'E':\n        return 5;\n\n      case 'F':\n        return 6;\n\n      case 'G':\n        return 7;\n\n      case 'H':\n        return 8;\n\n      case 'I':\n        return 9;\n    }\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column); //if there is a number other than 0 or value present at the current coordinate\n\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false; //if value exists in the given row skipping the coordinate provided\n\n    for (let i = 0; i < 9; i++) {\n      if (i == column - 1) continue;\n      if (grid[row - 1][i] == value) return false;\n    }\n\n    return true;\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column);\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false;\n\n    for (let i = 0; i < 9; i++) {\n      if (i == row - 1) continue;\n      if (grid[i][column - 1] == value) return false;\n    }\n\n    return true;\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column);\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false;\n    let startRow = row - row % 3;\n    let startCol = column - column % 3;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (grid[i + startRow][j + startCol] == value) return false;\n      }\n    }\n\n    return true;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let x = 0; x <= 8; x++) if (grid[row][x] == num) return false;\n\n    for (let x = 0; x <= 8; x++) if (grid[x][col] == num) return false;\n\n    let startRow = row - row % 3,\n        startCol = col - col % 3;\n\n    for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++) if (grid[i + startRow][j + startCol] == num) return false;\n\n    return true;\n  }\n\n  solveSuduko(grid, row, col) {\n    if (row == N - 1 && col == N) return grid;\n\n    if (col == N) {\n      row++;\n      col = 0;\n    }\n\n    if (grid[row][col] != 0) return this.solveSuduko(grid, row, col + 1);\n\n    for (let num = 1; num < 10; num++) {\n      if (this.isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (this.solveSuduko(grid, row, col + 1)) return grid;\n      }\n\n      grid[row][col] = 0;\n    }\n\n    return false;\n  }\n\n  transform(puzzleString) {\n    let i = 0,\n        k = 0;\n    let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    if (puzzleString.length !== 81) return false; //new\n\n    let arr = puzzleString.split('');\n    arr.forEach(elem => {\n      if (/[a-z]/i.test(elem)) return false; //new\n\n      if (elem === '.') arr[i] = 0;else arr[i] = parseInt(elem);\n      i++;\n    });\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (arr[k] !== 0) grid[i][j] = arr[k];\n        k++;\n      }\n    }\n\n    return grid;\n  }\n\n  transformBack(grid) {\n    return grid.flat().join('');\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString);\n    if (!grid) return false; //new\n\n    let solved = this.solveSuduko(grid, 0, 0);\n    if (!solved) return false; //new\n\n    let solvedString = this.transformBack(solved);\n    return solvedString;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "N",
        "SudokuSolver",
        "validate",
        "puzzleString",
        "regex",
        "test",
        "length",
        "letterToNumber",
        "row",
        "toUpperCase",
        "checkRowPlacement",
        "column",
        "value",
        "grid",
        "transform",
        "parseInt",
        "i",
        "checkColPlacement",
        "checkRegionPlacement",
        "startRow",
        "startCol",
        "j",
        "isSafe",
        "col",
        "num",
        "x",
        "solveSuduko",
        "k",
        "arr",
        "split",
        "forEach",
        "elem",
        "transformBack",
        "flat",
        "join",
        "solve",
        "solved",
        "solvedString",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\quality-assurance-projects-main\\Sodoku Solver\\controllers\\",
      "sourcesContent": [
        "let N = 9;\n\nclass SudokuSolver {\n\n  validate(puzzleString) {\n    const regex = /^[1-9.]+$/ \n\n    if(!puzzleString) return false\n    else if(!regex.test(puzzleString)) return false\n    else if(puzzleString.length !== 81) return false\n    else return true\n  }\n\n  letterToNumber(row){\n    switch (row.toUpperCase()){\n      case 'A':\n        return 1\n      case 'B':\n        return 2\n      case 'C':\n        return 3\n      case 'D':\n        return 4\n      case 'E':\n        return 5\n      case 'F':\n        return 6\n      case 'G':\n        return 7\n      case 'H':\n        return 8\n      case 'I':\n        return 9\n    }\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n    //if there is a number other than 0 or value present at the current coordinate\n    if(grid[row-1][column-1] !== 0 && grid[row-1][column-1] != value) return false\n\n    //if value exists in the given row skipping the coordinate provided\n    for(let i = 0; i < 9; i++) {\n      if(i == column-1) continue\n      if(grid[row-1][i] == value)\n        return false\n    }\n    return true\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n  \n    if(grid[row - 1][column - 1] !== 0 && grid[row-1][column-1] != value)\n      return false\n    \n    for(let i = 0; i < 9; i++){\n      if(i == row-1) continue\n      if(grid[i][column - 1] == value)\n        return false\n    }  \n    return true\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n  \n    if(grid[row - 1][column - 1] !== 0 && grid[row-1][column-1] != value)\n      return false\n\n    let startRow = row - (row  % 3)\n    let startCol = column - (column % 3)\n\n    for(let i = 0; i < 3; i++){\n      for(let j = 0; j < 3; j++) {\n        if(grid[i + startRow][j + startCol] == value)\n          return false\n        }\n      }\n    return true \n  }\n\n  isSafe(grid, row, col, num)\n  {\n      for(let x = 0; x <= 8; x++)\n          if (grid[row][x] == num)\n              return false;\n\n      for(let x = 0; x <= 8; x++)\n          if (grid[x][col] == num)\n              return false;\n  \n      let startRow = row - row % 3,\n          startCol = col - col % 3;\n          \n      for(let i = 0; i < 3; i++)\n          for(let j = 0; j < 3; j++)\n              if (grid[i + startRow][j + startCol] == num)\n                  return false;\n  \n      return true;\n  }\n\n  solveSuduko(grid, row, col)\n  {\n    if (row == N - 1 && col == N)\n        return grid;\n\n    if (col == N){\n        row++;\n        col = 0;\n    }\n \n    if (grid[row][col] != 0)\n        return this.solveSuduko(grid, row, col + 1);\n \n    for(let num = 1; num < 10; num++)\n    {\n        if (this.isSafe(grid, row, col, num))\n        {\n            grid[row][col] = num;\n            if (this.solveSuduko(grid, row, col + 1))\n                return grid;\n        }\n        grid[row][col] = 0;\n    }\n    return false;\n  }\n\n  transform(puzzleString) {\n    let i= 0, k = 0;\n    let grid = [\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0]\n    ]\n\n    if(puzzleString.length !== 81) return false //new\n\n    let arr = puzzleString.split('')\n    arr.forEach(elem => {\n      if(/[a-z]/i.test(elem)) return false //new\n      if (elem === '.') arr[i] = 0\n      else arr[i] = parseInt(elem)\n      i++\n    })\n    \n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++) {\n            if(arr[k] !== 0) grid[i][j] = arr[k] \n            k++\n        }\n    }\n    return grid\n  }\n\n  transformBack(grid) {\n    return grid.flat().join('')\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString)\n    if(!grid) return false //new\n\n    let solved = this.solveSuduko(grid, 0, 0)\n    if(!solved) return false //new\n    \n    let solvedString = this.transformBack(solved)\n    return solvedString\n  }\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761280582661
  }
}